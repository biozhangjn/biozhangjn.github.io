<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux | Jiannan Zhang</title><link>/categories/linux/</link><atom:link href="/categories/linux/index.xml" rel="self" type="application/rss+xml"/><description>Linux</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Fri, 24 Apr 2020 00:00:00 +0000</lastBuildDate><image><url>img/map[gravatar:%!s(bool=false) shape:circle]</url><title>Linux</title><link>/categories/linux/</link></image><item><title>阿里云服务新配置代码备存</title><link>/post/linux/aliyun-code/</link><pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate><guid>/post/linux/aliyun-code/</guid><description>&lt;p>新添了阿里云服务器，解决frp走国外服务器的延迟问题，同时为实验室数据分享网址的建立练手，当然以后肯定还会有很多购新的事件，因此这里记录下相关代码和备注事项，方便以后的操作：&lt;/p>
&lt;h2 id="ssh登陆">SSH登陆&lt;/h2>
&lt;p>&lt;del>垃圾&lt;/del>阿里云，操作复杂，事项繁多，比Vutlr的界面复杂太多了，不过安全性上面确实可能要高一些，新手直接劝退吧，不过新手也不会上来就买CES，或者买来就是练手的，我就是新手，差点被劝退了~~~&lt;/p>
&lt;p>首先重置密码，即设置新密码，为什么不能随机给个默认的，要这么麻烦，吐槽+1&amp;hellip;&amp;hellip;
然后在安全组界面添加密钥，默认只能通过密钥登陆，安全性提高，然后记得重启CES，随便啥远程登陆进去~再次前排推荐&lt;code>Visual Studio Code&lt;/code>！！！&lt;/p>
&lt;h2 id="虚拟内存">虚拟内存&lt;/h2>
&lt;p>由于开启swap分区会导致硬盘IO性能下降，因此阿里云服务器初始状态未配置swap，如果某些应用需要开启swap分区，自己设置即可。&lt;del>小鸡的烦恼，土豪随意&lt;/del>&lt;/p>
&lt;pre>&lt;code class="language-SHELL">sudo dd if=/dev/zero of=swapfile bs=1024 count=2048000
sudo mkswap -f swapfile
chmod 0600 swapfile
sudo swapon swapfile
sudo cp /etc/fstab /etc/fstab.bak
echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab #学到么？下面还有类似操作喔~
shutdown -r now #重启看下free
&lt;/code>&lt;/pre>
&lt;h2 id="r-shiny-and-rstudio">R, Shiny and Rstudio&lt;/h2>
&lt;h3 id="r-installhttpscranr-projectorgbinlinuxubuntureadmehtml">
&lt;a href="https://cran.r-project.org/bin/linux/ubuntu/README.html" target="_blank" rel="noopener">R install&lt;/a>&lt;/h3>
&lt;pre>&lt;code class="language-SHELL">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
#根据系统选择合适的软件包，不确定记得去官网查看下最新记录
sudo add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/'
sudo add-apt-repository 'deb https://mirrors.tuna.tsinghua.edu.cn/CRAN/bin/linux/ubuntu bionic-cran35/'
sudo apt-get update
sudo apt-get install r-base
sudo apt-get install r-base-dev
sudo -i R
&lt;/code>&lt;/pre>
&lt;h3 id="rstudio-serverhttpsrstudiocomproductsrstudiodownload-serverdebian-ubuntu">
&lt;a href="https://rstudio.com/products/rstudio/download-server/debian-ubuntu/" target="_blank" rel="noopener">Rstudio server&lt;/a>&lt;/h3>
&lt;p>&lt;code>116.62.102.124&lt;/code>&lt;/p>
&lt;pre>&lt;code class="language-SHELL"># 视系统不同选择有差异，这里是ubuntu 18.04
sudo apt-get install gdebi-core
wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-1.2.5033-amd64.deb
sudo gdebi rstudio-server-1.2.5033-amd64.deb
echo &amp;quot;www-port=8787&amp;quot; | sudo tee -a /etc/rstudio/rserver.conf #熟悉么~~
#查看是否安装正确
sudo rstudio-server verify-installation
#启动
sudo rstudio-server start
#查看状态
sudo rstudio-server status
#停止
sudo rstudio-server stop
#重启
sudo rstudio-server restart
#查看服务端ip地址
ifconfig
&lt;/code>&lt;/pre>
&lt;h3 id="adduser">Adduser&lt;/h3>
&lt;pre>&lt;code class="language-SHELL">sudo adduser zhangjn
usermod -aG sudo zhangjn
su zhangjn
# test the root privileges
sudo ls -la /root
# change password
passwd zhangjn
# copy ssh file and directory structure to new user account in existing session
rsync --archive --chown=zhangjn:zhangjn ~/.ssh /home/zhangjn
&lt;/code>&lt;/pre>
&lt;h3 id="shiny-serverhttpsrstudiocomproductsshinydownload-serverubuntu">
&lt;a href="https://rstudio.com/products/shiny/download-server/ubuntu/" target="_blank" rel="noopener">Shiny server&lt;/a>&lt;/h3>
&lt;pre>&lt;code class="language-SHELL"># install the Shiny R package
sudo su - \
-c &amp;quot;R -e \&amp;quot;install.packages('shiny', repos='https://cran.rstudio.com/')\&amp;quot;&amp;quot;
sudo apt-get install gdebi-core
wget https://download3.rstudio.org/ubuntu-14.04/x86_64/shiny-server-1.5.13.944-amd64.deb
sudo gdebi shiny-server-1.5.13.944-amd64.deb
&lt;/code>&lt;/pre>
&lt;p>
&lt;a href="https://www.zhangjn.xyz/post/shiny-server/" target="_blank" rel="noopener">Change user&lt;/a>&lt;/p>
&lt;pre>&lt;code class="language-SHELL">nano /etc/shiny-server/shiny-server.conf
&lt;/code>&lt;/pre>
&lt;p>Restart Shiny Server Pro so that the activated version will get started.&lt;/p>
&lt;pre>&lt;code class="language-SHELL">sudo systemctl restart shiny-server
&lt;/code>&lt;/pre>
&lt;h3 id="install-seurat-package-in-rstudio">Install Seurat package in Rstudio&lt;/h3>
&lt;pre>&lt;code class="language-SHELL"># Problem installing R packages that depends from &amp;quot;OpenSSL&amp;quot; library
sudo apt-get install libssl-dev
# Problem installing R packages that depends from &amp;quot;httr&amp;quot; library
sudo apt-get install libcurl4-openssl-dev
# Problem installing R packages that depends from &amp;quot;metap&amp;quot; library
# install package using BiocManager
if (!requireNamespace(&amp;quot;BiocManager&amp;quot;, quietly = TRUE))
install.packages(&amp;quot;BiocManager&amp;quot;)
BiocManager::install(&amp;quot;multtest&amp;quot;)
BiocManager::install(&amp;quot;metap&amp;quot;)
&lt;/code>&lt;/pre>
&lt;h3 id="configuring-nginx-on-your-serverhttpssupportrstudiocomhcen-usarticles213733868-running-shiny-server-with-a-proxy">
&lt;a href="https://support.rstudio.com/hc/en-us/articles/213733868-Running-Shiny-Server-with-a-Proxy" target="_blank" rel="noopener">Configuring nginx on your server&lt;/a>&lt;/h3>
&lt;pre>&lt;code class="language-SHELL">
sudo apt-get -y install nginx
# make a backup of the nginx configuration
sudo cp /etc/nginx/sites-enabled/default /etc/nginx/sites-enabled/default-backup
# 配置自己摸索下
sudo nano /etc/nginx/sites-enabled/default
&lt;/code>&lt;/pre>
&lt;h3 id="acmesh-and-ssl">&lt;code>acme.sh&lt;/code> and &lt;code>ssl&lt;/code>&lt;/h3>
&lt;pre>&lt;code class="language-SHELL">curl https://get.acme.sh | sh
# You’ll need to generate an API key at https://www.namesilo.com/account_api.php
# Optionally you may restrict the access to an IP range there.
# for namesilo ssl
export Namesilo_Key=&amp;quot;XXXXXXXXXXXXX&amp;quot;
~/.acme.sh/acme.sh --issue --dns dns_namesilo --dnssleep 2500 -d scrna.zhangjn.xyz
~/.acme.sh/acme.sh --issue --dns dns_namesilo --dnssleep 2500 -d shiny.zhangjn.xyz
~/.acme.sh/acme.sh --installcert -d shiny.zhangjn.xyz \
--key-file /etc/nginx/ssl/shiny.zhangjn.xyz.key \
--fullchain-file /etc/nginx/ssl/fullchain.cer \
--fullchain-file /etc/nginx/ssl/ca.cer \
--reloadcmd &amp;quot;systemctl restart nginx.service&amp;quot;
`TLSv1`证书会导致不安全，记得修改下。
# for aliyun ssl
export Ali_Key=&amp;quot;XXXXXXXXXXXXXXXX&amp;quot;
export Ali_Secret=&amp;quot;XXXXXXXXXXXXXXXXXXXX&amp;quot;
~/.acme.sh/acme.sh --issue --dns dns_ali -d avianscu.com -d scrna.avianscu.com
~/.acme.sh/acme.sh --installcert -d avianscu.com \
--key-file /etc/nginx/ssl2/avianscu.com.key \
--fullchain-file /etc/nginx/ssl2/fullchain.cer \
--reloadcmd &amp;quot;systemctl restart nginx.service&amp;quot;
&lt;/code>&lt;/pre>
&lt;h2 id="frp设置httpsgithubcomfatedierfrpblobmasterreadme_zhmd">
&lt;a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">Frp设置&lt;/a>&lt;/h2>
&lt;pre>&lt;code class="language-shell"># install
wget https://github.com/fatedier/frp/releases/download/v0.22.0/frp_0.22.0_linux_amd64.tar.gz
tar -zxvf frp_0.22.0_linux_amd64.tar.gz
# 设置frp服务的系统自启动等操作，很方便，frps和frpc注意切换
sudo nano /lib/systemd/system/frps.service
# 在frps.service里写入以下内容
[Unit]
Description=frps service
After=network.target syslog.target
Wants=network.target
[Service]
Type=simple
# 启动服务的命令（此处写你的frps的实际安装目录）
ExecStart=/root/soft/frp_0.32.1_linux_amd64/frps -c /root/soft/frp_0.32.1_linux_amd64/frps/frps.ini
[Install]
WantedBy=multi-user.target
# Ubuntu设置frp的系统控制
sudo systemctl start frps
sudo systemctl enable frps
sudo systemctl restart frps
sudo systemctl stop frps
sudo systemctl status frps
# 多个服务端连接同一个客户端，小技巧喔
./frpc -c ./frpc1.ini
./frpc -c ./frpc2.ini
./frpc -c ./frpc3.ini
&lt;/code>&lt;/pre></description></item><item><title>Rstudio-server 相关汇总</title><link>/post/linux/rstudio-server-%E7%9B%B8%E5%85%B3%E6%B1%87%E6%80%BB/</link><pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate><guid>/post/linux/rstudio-server-%E7%9B%B8%E5%85%B3%E6%B1%87%E6%80%BB/</guid><description>&lt;p>预期准备再入一个阿里云的CES做在线服务器，虽然买一个新的高性能服务器可能更理想，但是想着懒得维护另外一台服务器了，不如现在开始利用云服务，说不定以后有钱了在云上玩高性能服务器呢~~&lt;/p>
&lt;p>下面就记录Rstudio server相关信息，持续更新~~&lt;/p>
&lt;p>总的来说，信息是不断进步的，在随时关注官网等资源的同时，自己记录一些基本的操作，省去google的时间也是极好的，note就该发挥自己的作用~~&lt;/p>
&lt;h3 id="基本代码">基本代码&lt;/h3>
&lt;pre>&lt;code class="language-shell">#查看是否安装正确
sudo rstudio-server verify-installation
## 启动
sudo rstudio-server start
## 查看状态
sudo rstudio-server status
## 停止
sudo rstudio-server stop
## 重启
sudo rstudio-server restart
## 查看服务端ip地址
ifconfig
&lt;/code>&lt;/pre>
&lt;h3 id="卸载软件">卸载软件&lt;/h3>
&lt;pre>&lt;code class="language-shell"># 安装的信息还是直接去官网安装最新版本
sudo apt-get autoremove --purge rstudio-server
&lt;/code>&lt;/pre>
&lt;h3 id="添加用户">添加用户&lt;/h3>
&lt;pre>&lt;code class="language-shell"># 添加用户的命令是linux中的命令
# 添加用户组
groupadd Rstudiosrv
# 添加用户wdmd 在指定的组Rstudiosrv内
useradd zjn -g Rstudiosrv;
# 设置该用户的密码
passwd zjn
# 删除用户和组
userdel zjn
groupdel Rstudiosrv
# 显示用户信息
id user
cat /etc/passwd
&lt;/code>&lt;/pre>
&lt;h3 id="修改端口-and-防火墙写下来就不用翻onenote或者google了都在自己的note里面">修改端口 and 防火墙，写下来就不用翻onenote或者google了，都在自己的note里面。&lt;/h3>
&lt;pre>&lt;code class="language-shell"># 给 RStudio 分配访问端口
echo &amp;quot;www-port=8181&amp;quot; | sudo tee -a /etc/rstudio/rserver.conf
# 将 R 软件路径告诉 RStudio Server，看情况设置
echo &amp;quot;rsession-which-r=/usr/local/bin/R-devel&amp;quot; | sudo tee -a /etc/rstudio/rserver.conf
# 安装 firewalld 防火墙管理工具
sudo apt-get install -y firewalld
# 查看端口情况
firewall-cmd --list-ports
# 打开8181端口
sudo firewall-cmd --zone=public --add-port=8181/tcp --permanent
# 重启防火墙使配置生效
sudo firewall-cmd --reload
# 重启你懂的
sudo rstudio-server restart
&lt;/code>&lt;/pre>
&lt;h3 id="请合理利用rstudio和github的关联功能比如创建带版本控制的project">请合理利用Rstudio和github的关联功能，比如创建带版本控制的project&lt;/h3>
&lt;hr>
&lt;h3 id="服务器安装r等相关">服务器安装R等相关&lt;/h3>
&lt;p>安装最新的 Git 和 libgit2-dev 库，所以添加两个源&lt;/p>
&lt;pre>&lt;code class="language-shell">sudo add-apt-repository -y ppa:jeroen/libgit2
sudo add-apt-repository -y ppa:git-core/ppa
# 移除
sudo add-apt-repository --remove ppa:jeroen/libgit2
&lt;/code>&lt;/pre>
&lt;h4 id="解决系统依赖问题重点将r-base-dev-所需的依赖全部装上有了-build-dep-就不用一个一个去找了">解决系统依赖问题，重点，将r-base-dev 所需的依赖全部装上，有了 build-dep 就不用一个一个去找了&lt;/h4>
&lt;pre>&lt;code class="language-shell"># Ubuntu
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get build-dep r-base-dev
# Fedora
sudo dnf update &amp;amp;&amp;amp; sudo dnf builddep R-devel
# CentOS
sudo yum update &amp;amp;&amp;amp; sudo yum install -y yum-utils &amp;amp;&amp;amp; sudo yum-builddep R-devel
&lt;/code>&lt;/pre>
&lt;p>其它的系统依赖，供常用的 R 包安装使用，常用的 R 包有 xml2、ssl、git2r、curl、openssl、magick、nloptr、igraph、RcppGSL。来来来，空间大的都装上~ 其实，最好还是安装错误提示缺啥安装啥比较好~&lt;/p>
&lt;pre>&lt;code class="language-shell">sudo apt-get install -y libxml2-dev libssl-dev libgit2-dev \
libnlopt-dev libxmu-dev libglpk-dev libgsl-dev \
ghostscript imagemagick optipng subversion jags \
libcurl4-openssl-dev libmagick++-dev \
texlive-xetex texlive-lang-chinese
&lt;/code>&lt;/pre>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ul>
&lt;li>
&lt;a href="https://www.xiangyunhuang.com.cn/2019/05/r-devel-ubuntu/" target="_blank" rel="noopener">从源码安装最新的开发版R&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>未完待续&amp;hellip;&lt;/p></description></item><item><title>Ubuntu设置虚拟内存</title><link>/post/linux/ubuntu%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</link><pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate><guid>/post/linux/ubuntu%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</guid><description>&lt;p>现在数据展示越来越离不开VPS/CES了，但是买的服务一般都是1G内存的（大写的穷），所以一般买了VPS习惯性的会增加虚拟内存，记下免得每次都去google。&lt;/p>
&lt;h3 id="创建虚拟映像文件">创建虚拟映像文件：&lt;/h3>
&lt;pre>&lt;code class="language-shell">sudo swapon --show #查看SWAP分区
sudo dd if=/dev/zero of=swapfile bs=1024 count=1024000
&lt;/code>&lt;/pre>
&lt;p>虚拟内存大小一般接近物理内存就可以了。&lt;/p>
&lt;h3 id="将虚拟映像文件转换成swap文件">将虚拟映像文件转换成swap文件：&lt;/h3>
&lt;pre>&lt;code class="language-SHELL">sudo mkswap -f swapfile
chmod 0600 swapfile
&lt;/code>&lt;/pre>
&lt;h3 id="激活-swap">激活 swap：&lt;/h3>
&lt;pre>&lt;code class="language-shell">sudo swapon swapfile
&lt;/code>&lt;/pre>
&lt;p>然后输入&lt;code>free&lt;/code>查看内存信息，就可以发现虚拟内存已经启用。&lt;/p>
&lt;p>TIPS：重启之后，需要重新激活swap，建议将激活命令写入开机启动项喔~~&lt;/p>
&lt;h3 id="将激活命令写入开机启动项">将激活命令写入开机启动项：&lt;/h3>
&lt;pre>&lt;code class="language-shell">sudo cp /etc/fstab /etc/fstab.bak
echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab #学到么？
shutdown -r now #重启看下free
&lt;/code>&lt;/pre>
&lt;h3 id="关闭和删除原来的swapfile">关闭和删除原来的swapfile：&lt;/h3>
&lt;pre>&lt;code class="language-shell">sudo swapoff swapfile
sudo rm /swapfile
&lt;/code>&lt;/pre>
&lt;p>over~~~&lt;/p></description></item></channel></rss>